@page "/appointments"
@inject HttpClient Http
@rendermode InteractiveServer

<h3 class="text-2xl font-bold mb-4">Appointment Details</h3>

<div class="mb-4 flex items-center gap-4">
    <button class="bg-blue-500 text-white px-4 py-2 rounded" @onclick="LoadAllAppointments">Show All</button>

    <input @bind="searchId" type="number" placeholder="Enter Appointment ID"
           class="border rounded px-3 py-2" />

    <button class="bg-green-500 text-white px-4 py-2 rounded" @onclick="LoadAppointmentById">Show by ID</button>
</div>

@if (appointments == null)
{
    <p>Loading...</p>
}
else if (!appointments.Any())
{
    <p>No appointments found.</p>
}
else
{
    <table class="table-auto border-collapse border border-gray-300 w-full text-sm">
        <thead class="bg-gray-100">
            <tr>
                <th class="border p-2">ID</th>
                <th class="border p-2">Date</th>
                <th class="border p-2">Doctor</th>
                <th class="border p-2">Specialization</th>
                <th class="border p-2">Patient</th>
                <th class="border p-2">Email</th>
                <th class="border p-2">Remarks</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var appointment in appointments)
            {
                <tr>
                    <td class="border p-2">@appointment.AppointmentId</td>
                    <td class="border p-2">@appointment.Date.ToShortDateString()</td>
                    <td class="border p-2">@appointment.DoctorName</td>
                    <td class="border p-2">@appointment.Specialization</td>
                    <td class="border p-2">@appointment.PatientName</td>
                    <td class="border p-2">@appointment.Email</td>
                    <td class="border p-2">@appointment.Remarks</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-red-600 mt-2">@errorMessage</p>
}

@code {
    private List<AppointmentDetailDto>? appointments;
    private int searchId;
    private string? errorMessage;

    private async Task LoadAllAppointments()
    {
        errorMessage = null;
        try
        {
            appointments = await Http.GetFromJsonAsync<List<AppointmentDetailDto>>("Appointments");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching all: {ex.Message}";
        }
    }

    private async Task LoadAppointmentById()
    {
        errorMessage = null;
        try
        {
            var single = await Http.GetFromJsonAsync<AppointmentDetailDto>($"Appointments/{searchId}");
            appointments = single is not null ? new List<AppointmentDetailDto> { single } : new List<AppointmentDetailDto>();
        }
        catch (HttpRequestException)
        {
            errorMessage = "Appointment not found.";
            appointments = new List<AppointmentDetailDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching by ID: {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAllAppointments();
    }
}
